# ============================================================================
# kiro2api-deno 环境配置文件示例
# ============================================================================
# 复制此文件为 .env 并根据需要修改配置

# ============================================================================
# Token管理配置（必需）
# ============================================================================
#
# 使用JSON格式配置认证信息，支持多认证方式和多token
# 支持两种配置方式：
#   1. 直接配置JSON字符串（推荐用于简单配置）
#   2. 配置文件路径（推荐用于复杂配置或敏感信息管理）
#
# 基本格式：
# KIRO_AUTH_TOKEN='[认证配置对象数组]'
# 或
# KIRO_AUTH_TOKEN=/path/to/auth_config.json
#
# 每个认证配置对象包含：
# - auth: 认证方式，可选值为 "Social" 或 "IdC"
# - refreshToken: 刷新令牌（必需）
# - clientId: IdC认证的客户端ID（IdC认证时必需）
# - clientSecret: IdC认证的客户端密钥（IdC认证时必需）
# - disabled: 是否禁用此配置（可选，默认false）
# ============================================================================
# Token获取方式
# ============================================================================
#
# Social tokens:
#   通常位于 ~/.aws/sso/cache/ 目录下的JSON文件中
#   文件名类似：kiro-auth-token.json 或包含 "refreshToken" 字段的缓存文件
#
# IdC tokens:
#   位于 ~/.aws/sso/cache/ 目录下的JSON文件中
#   需要同时提供 clientId 和 clientSecret
#
# 方式1：直接配置JSON字符串
# 示例1：单个 Social 认证
KIRO_AUTH_TOKEN='[{"auth":"Social","refreshToken":"your_social_refresh_token_here"}]'

# 方式2：配置文件路径（系统会优先检查是否为文件）
# KIRO_AUTH_TOKEN=/path/to/auth_config.json
# KIRO_AUTH_TOKEN=./config/auth.json

# 示例2：单个 IdC 认证
# KIRO_AUTH_TOKEN='[{"auth":"IdC","refreshToken":"your_idc_refresh_token_here","clientId":"your_idc_client_id","clientSecret":"your_idc_client_secret"}]'

# 示例3：多个认证混合
# KIRO_AUTH_TOKEN='[
#   {
#     "auth": "Social",
#     "refreshToken": "aorAAAAAGj....."
#   },
#   {
#     "auth": "IdC",
#     "refreshToken": "aorAAAAAGj....",
#     "clientId": "uG-18bI....",
#     "clientSecret": "eyJraWQiOiJrZXktM....."
#   }
# ]'
# ============================================================================
# Token选择策略
# ============================================================================
#
# - 系统使用"顺序选择"策略（sequential）
# - 按配置顺序依次使用token，当前token耗尽后自动切换到下一个
# - 支持多token自动负载均衡和容错

# ============================================================================
# 基础服务配置
# ============================================================================

# 服务端口（默认: 8080）
PORT=8080

# API认证密钥（默认: 123456）
# 建议使用强密码，至少32字符的随机字符串
KIRO_CLIENT_TOKEN=123456

# ============================================================================
# 日志配置
# ============================================================================

# 日志级别: debug, info, warn, error（默认: info）
LOG_LEVEL=info

# 日志格式: text, json（默认: json）
# - json: 结构化JSON格式，便于日志分析工具解析
# - text: 人类可读的文本格式，便于开发调试
LOG_FORMAT=json

# 日志文件路径（可选，不设置则只输出到控制台）
# 注意：Deno 需要 --allow-write 权限才能写入文件
# LOG_FILE=/var/log/kiro2api.log

# 控制台输出开关（默认: true）
# 设置为 false 则只输出到日志文件（如果配置了 LOG_FILE）
LOG_CONSOLE=true

# 开启调用者信息（默认: 在 debug 级别自动开启）
# 开启后日志会包含文件名和函数名，便于调试
# LOG_ENABLE_CALLER=true

# ============================================================================
# 最佳实践
# ============================================================================
#
# 1. 生产环境配置：
#    - 配置多个token实现负载均衡
#    - 设置 LOG_LEVEL=info 或 warn
#    - 启用日志文件记录: LOG_FILE=/var/log/kiro2api.log
#    - 使用 LOG_FORMAT=json 便于日志分析
#    - 使用强密码作为 KIRO_CLIENT_TOKEN
#
# 2. 开发环境配置：
#    - 设置 LOG_LEVEL=debug
#    - 使用 LOG_FORMAT=text 便于阅读
#    - 保持控制台输出: LOG_CONSOLE=true
#
# 3. 故障排除：
#    - 启用 LOG_LEVEL=debug 查看详细日志
#    - 检查token是否过期：查看日志中的"token刷新"相关信息
#    - 验证JSON格式：使用在线JSON验证器检查KIRO_AUTH_TOKEN格式
#    - 检查使用限制：日志会显示剩余可用次数
#
# 4. Deno Deploy 特别注意：
#    - Deno Deploy 不支持文件系统写入，LOG_FILE 配置将被忽略
#    - 日志会自动输出到 Deno Deploy 的日志系统
#    - 建议使用 LOG_FORMAT=json 以便日志查询和分析
